[build-system]
requires = ["hatchling>=1.27.0", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "anscombe_transform"
dynamic = ["version"]

authors = [
  { name = "Jerome Lecoq", email = "jeromel@alleninstitute.org" },
  { name = "Dimitri Yatsenko", email = "dimitr@datajoint.com" },
  { name = "Davis Bennett", email = "davis.v.bennett@gmail.com" },
]
maintainers = [
  { name = "Dimitri Yatsenko", email = "dimitr@datajoint.com" },
]
license = { file = "LICENSE" }
description = "Zarr V2 and V3 codecs for compressing photon-limited movies."
readme = "README.md"
requires-python = ">=3.11"
keywords = ["video compression", "numcodecs", "zarr", "compression algorithms", "multimedia", "multiphoton microscopy"]
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Topic :: Multimedia :: Video",
    "Topic :: Software Development :: Libraries",
]

dependencies = [
  "zarr>=3.1.2",
  "scikit-learn",
]

[project.optional-dependencies]
test = [
  "pytest==8.4.2",
  "pytest-cov",
  "nbmake",
  "scipy",
  "imageio",
  "matplotlib",
]
docs = [
  "mkdocs-material[imaging]>=9.6.14",
    "mkdocs>=1.6.1",
    "mkdocstrings>=0.29.1",
    "mkdocstrings-python>=1.16.10",
    "mike>=2.1.3",
    "mkdocs-redirects>=1.2.0",
    "markdown-exec[ansi]",
    "griffe-inherited-docstrings"
    ]

# Dependencies will be managed via requirements.txt

[project.urls]
Homepage = "https://github.com/datajoint/anscombe-transform"
Source = "https://github.com/datajoint/anscombe-transform"
Issues = "https://github.com/datajoint/anscombe-transform/issues"

[tool.hatch]
version.source = "vcs"
build.hooks.vcs.version-file = "src/anscombe_transform/version.py"

# Test the package against the latest version of
# upstream dependencies
[tool.hatch.envs.upstream]
python="3.13"
features = ["test"]
dependencies=[
  "zarr @ git+https://github.com/zarr-developers/zarr-python.git@main",
  "numcodecs @ git+https://github.com/numcodecs/numcodecs.git@main",
  "scikit-learn @ git+https://github.com/scikit-learn/scikit-learn.git@main",
  ]

[tool.hatch.envs.docs]
features = ["docs"]

[tool.hatch.envs.test]
features = ["test"]


[[tool.hatch.envs.test.matrix]]
python = ["3.11", "3.12", "3.13"]
numpy = ["1.26", "2.2"]

[dependency-groups]
test = [
    "pytest==8.4.2",
    "pytest-cov"
]
dev = [
  {include-group="test"}
]

[tool.repo-review]
ignore = [
	"PC111",  # fix Python code in documentation - enable later
	"PC180",  # for JavaScript - not interested
]

[tool.ruff]
line-length = 100
force-exclude = true
extend-exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "venv",
    "docs",
]

[tool.ruff.lint]
extend-select = [
    "ANN",  # flake8-annotations
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "EXE",  # flake8-executable
    "FA",   # flake8-future-annotations
    "FLY",  # flynt
    "FURB", # refurb
    "G",    # flake8-logging-format
    "I",    # isort
    "ISC",  # flake8-implicit-str-concat
    "LOG",  # flake8-logging
    "PERF", # Perflint
    "PIE",  # flake8-pie
    "PGH",  # pygrep-hooks
    "PT",   # flake8-pytest-style
    "PYI",  # flake8-pyi
    "RET",  # flake8-return
    "RSE",  # flake8-raise
    "RUF",
    "SIM",  # flake8-simplify
    "SLOT", # flake8-slots
    "TC",  # flake8-type-checking
    "TRY",  # tryceratops
    "UP",   # pyupgrade
    "W",    # pycodestyle warnings
]
ignore = [
    "ANN401",
    "PT011",  # TODO: apply this rule
    "RET505",
    "RET506",
    "RUF005",
    "RUF043",
    "SIM108",
    "TRY003",
    # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "W191",
    "E111",
    "E114",
    "E117",
    "D206",
    "D300",
    "Q000",
    "Q001",
    "Q002",
    "Q003",
    "COM812",
    "COM819",
    "TC006",
]